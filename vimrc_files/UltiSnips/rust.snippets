# For jumping ./rust-yew.snippets
extends rust-yew
# For jumping ./rust-template.snippets
extends rust-template

global !p
def expand(snip, jump_pos=1):
	if snip.tabstop != jump_pos: return
	vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')
endglobal

snippet match "Switch case"
match ${1:var_name} {
	${2:Enum} => ${3:println!("match!")},
	_ => (),
}
endsnippet
post_jump "expand(snip)"
snippet switch "Alias for match"
match$1
endsnippet
post_jump "expand(snip)"
snippet case "Alias for match"
match$1
endsnippet

snippet loop "Loop statement" b
loop {
	${1:${VISUAL}}
}$0
endsnippet

snippet if_let_some "If let statement for Some" b
if let Some(x) = ${1:var_name} {
	${0}
}
endsnippet

snippet struct "Struct statement"
struct ${1:struct_name} {
	${2:name: i32,}
}

impl $1 {
	$0
}
endsnippet

snippet # "Derive trait" b
#[derive($0)]
endsnippet
post_jump "expand(snip)"
snippet __derive "Alias for #" b
#$1
endsnippet

snippet fn "Function"
fn ${1:main}($2) {
	${0:${VISUAL}}
}
endsnippet

snippet vec "vec macro"
vec![${0:${VISUAL}}]
endsnippet
