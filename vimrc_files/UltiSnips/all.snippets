# To lower priority due to generality
priority -10

global !p
# ref: https://github.com/honza/vim-snippets/blob/master/pythonx/vimsnippets.py
def get_comment_format():
    """ Returns a 4-element tuple (first_line, middle_lines, end_line, indent)
    representing the comment format for the current file.
    It first looks at the 'commentstring', if that ends with %s, it uses that.
    Otherwise it parses '&comments' and prefers single character comment
    markers if there are any.
    """
    commentstring = vim.eval("&commentstring")
    if commentstring.endswith("%s"):
        c = commentstring[:-2]
        return (c.rstrip(), c.rstrip(), c.rstrip(), "")
    comments = _parse_comments(vim.eval("&comments"))
    for c in comments:
        if c[0] == "SINGLE_CHAR":
            return c[1:]
    return comments[0][1:]


def make_box(twidth, bwidth=None):
    b, m, e, i = (s.strip() for s in get_comment_format())
    m0 = m[0] if m else ''
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m0 + 2 * m0
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + m + bwidth_inner * m0 + 2 * m0 + e
    return sline, mlines, mlinee, eline
endglobal

snippet __date "Insert date"
`!p
from datetime import datetime
snip.rv = datetime.now().strftime("%Y-%m-%d %a %X")`
endsnippet

snippet __time "Insert time"
`!p
from datetime import datetime
snip.rv = datetime.now().strftime("%X")`
endsnippet

snippet __folder_tree "Insert snippet for a folder tree" b
.
├─ folder
│  ├─ a.sh
│  └─ b.py
└─ README.md
endsnippet

snippet __pwd "Insert current directory"
`!p
from os import getcwd
snip.rv = getcwd()`
endsnippet


snippet __comment_box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet __comment_box_full "A nice box over the full width" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet
