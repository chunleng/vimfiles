# Common Function

global !p
def get_file_name(default: str='untitled') -> str:
	return snip.basename or default

def	snake_to_upper_camel_case(s: str) -> str:
	return ''.join([ x.title() for x in s.split('_')])
endglobal
#
# Snippets

snippet class "Class declaration" b
class ${1:`!p snip.rv = get_file_name()`}:
	def __init__(self${2:, args:int}):
		$0
endsnippet

snippet temp_function_main "Main function declaration" b
if __name__ == '__main__':
	$0
endsnippet

snippet temp_fastapi_new_app "FastAPI new app template" b
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)
app.add_middleware(CORSMiddleware, allow_origins=['*'])
endsnippet

snippet temp_fastapi_get "FastAPI get object method" b
@app.get(
	'/`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	operation_id='`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	response_class=JSONResponse,
	response_model=${3:Model},
	tags=['$4']
)
async def ${1:get_foo}(${2:arg:int}):
	$0
endsnippet

snippet temp_fastapi_create "FastAPI create object method" b
@app.post(
	'/`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	operation_id='`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	response_class=JSONResponse,
	response_model=${3:Model},
	tags=['$4']
)
async def ${1:create_foo}(${2:arg:int}):
	$0
endsnippet

snippet temp_fastapi_model "FastAPI model" b
class ${1:Item}(BaseModel):
	name: str
	description: Optional[str] = None
	price: float
	tax: Optional[float] = None
	tags: list = []
endsnippet

snippet match "Match-case" b
match ${1:var}:
	case ${2:"1"}:
		pass
	${3:case _:
		pass # default}
endsnippet
