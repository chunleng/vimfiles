# Common Function

global !p
def get_file_name(default: str='untitled') -> str:
	return snip.basename or default

def snake_to_upper_camel_case(s: str) -> str:
	return ''.join([ x.title() for x in s.split('_')])

def expand(snip, jump_pos=1):
    if snip.tabstop != jump_pos: return
    vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')
endglobal
#
# Snippets

snippet class_init "Class with declaration" b
class ${1:`!p snip.rv = snake_to_upper_camel_case(get_file_name())`}:
	def __init__(self${2:, args:int}):
		$0
endsnippet

snippet class_enum "Enum declaration" b
class ${1:Name}(Enum):
	${2:EName} = 1
endsnippet

snippet __function_main "Main function declaration" b
if __name__ == '__main__':
	$0
endsnippet
post_jump "expand(snip)"
snippet if_main "Alias for __function_main" b
__function_main$1
endsnippet

snippet __fastapi_new_app "FastAPI new app template" b
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)
app.add_middleware(CORSMiddleware, allow_origins=['*'])
endsnippet

snippet __fastapi_get "FastAPI get object method" b
@app.get(
	'/`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	operation_id='`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	response_class=JSONResponse,
	response_model=${3:Model},
	tags=['$4']
)
async def ${1:get_foo}(${2:arg:int}):
	$0
endsnippet

snippet __fastapi_post "FastAPI post object method" b
@app.post(
	'/`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	operation_id='`!p snip.rv = snake_to_upper_camel_case(t[1])`',
	response_class=JSONResponse,
	response_model=${3:Model},
	tags=['$4']
)
async def ${1:create_foo}(${2:arg:int}):
	$0
endsnippet

snippet __fastapi_model "FastAPI model" b
class ${1:Item}(BaseModel):
	name: str
	description: Optional[str] = None
	price: float
	tax: Optional[float] = None
	tags: list = []
endsnippet

snippet match "Match-case" b
match ${1:var}:
	case ${2:"1"}:
		pass
	${3:case _:
		pass # default}
endsnippet

post_jump "expand(snip)"
snippet switch "Alias for match" b
match$1
endsnippet
post_jump "expand(snip)"
snippet select "Alias for match" b
match$1
endsnippet

snippet try "Try except" b
try:
	${1:${VISUAL:pass}}
except Exception as e:
	${2:pass}
endsnippet

snippet __docstring_module_googlestyle "Template for google style module docstring" b
"""${1:A one line summary of the module or program, terminated by a period.}

${2:Leave one blank line.  The rest of this docstring should contain an
overall description of the module or program.  Optionally, it may also
contain a brief description of exported classes and functions and/or usage
examples.}

	Typical usage example:

	${3:foo = ClassFoo()
	bar = foo.FunctionBar()}
"""
endsnippet

snippet __docstring_class_googlestyle "Template for google style class docstring" b
"""${1:Summary of class here.}

${2:Longer class information...}

Attributes:
	${3:likes_spam: A boolean indicating if we like SPAM or not.
	eggs: An integer count of the eggs we have laid.}
"""
endsnippet

snippet __docstring_function_googlestyle "Template for google style function docstring" b
"""${1:Fetches rows from a Smalltable.}

${2:Retrieves rows pertaining to the given keys from the Table instance
represented by table_handle.  String keys will be UTF-8 encoded.}

Args:
	keys: A sequence of strings representing the key of each table
		row to fetch.  String keys will be UTF-8 encoded.

Returns:
	string

	A dict mapping keys to the corresponding table row data
	fetched. Each row is represented as a tuple of strings. For
	example:

	{b'Serak': ('Rigel VII', 'Preparer'),
	 b'Zim': ('Irk', 'Invader'),
	 b'Lrrr': ('Omicron Persei 8', 'Emperor')}

Raises:
	IOError: An error occurred accessing the smalltable.
"""
endsnippet
