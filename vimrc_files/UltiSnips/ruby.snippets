# Common Function

global !p
def getFileName(default='untitled'):
	return snip.basename or default
endglobal

# Snippets

snippet class "Class declaration" b
class ${1:ClassName}
	def initialize(${2:args})
		${3:${VISUAL}}$0
	end
end
endsnippet

#TODO To fix displaying of argument in VISUAL-placeholder
snippet module "Module declaration" b
module ${1:ModuleName}
	${2:${VISUAL}}$0
end
endsnippet

##################
#  Control Flow  #
##################

snippet if "If statement" b
if ${1:expr}
	${2:${VISUAL}}$0
end
endsnippet

snippet unless "Unless statement" b
unless ${1:expr}
	${2:${VISUAL}}$0
end
endsnippet

snippet case "Case statement" b
case ${1:variable}
when ${2:expr}
	$3
${4:else}$0
end
endsnippet

snippet while "While statement" b
while ${1:expr}
	${2:${VISUAL}}$0
end
endsnippet

snippet beginwhile "Begin-while statement" b
begin
	${2:${VISUAL}}$0
end while ${1:expr}
endsnippet

#TODO give a more meaningful hint instead of just expr
snippet for "For statement" b
for ${1:expr}
	${2:${VISUAL}}$0
end
endsnippet

#TODO find a way to call "each" snippet to invoke "foreach" content
snippet foreach "For-each statement" b
${1:expr}.each do |${2:i}|
    ${3:${VISUAL:# expr still contains variable}}
end
endsnippet
snippet each "For-each statement" b
${1:expr}.each do |${2:i}|
    ${3:${VISUAL:# expr still contains variable}}
end
endsnippet

#TODO find a way to call "beginrescue" snippet to invoke "trycatch" content
snippet trycatch "Description" b
begin
    ${1:${VISUAL:# Do something}}
rescue ${2:${3:SomeExceptionClass} => ${4:ex}}
    ${5:# Something went wrong}
${6:ensure
    ${7:# Always Run}
}end
endsnippet
snippet beginrescue "Description" b
begin
    ${1:${VISUAL:# Do something}}
rescue ${2:${3:SomeExceptionClass} => ${4:ex}}
    ${5:# Something went wrong}
${6:ensure
    ${7:# Always Run}
}end
endsnippet

####################
#  Other Snippets  #
####################

snippet #! "Run declaration" b
#!/usr/bin/ruby ${1:-w}

$0
endsnippet

snippet print "Print multiple lines" b
print <<__EOF__
${0:${VISUAL:Hello World}}
__EOF__
endsnippet
