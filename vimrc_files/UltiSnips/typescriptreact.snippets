# For jumping ./typescript.snippets
extends typescript

global !p
def upper_camel(s):
	if len(s) > 1:
		return s[0].capitalize() + s[1:]
	return s.capitalize()

def expand(snip, jump_pos=1):
    if snip.tabstop != jump_pos: return
    vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')
endglobal

snippet __react_new_material_component "New component created with material UI" b
import {makeStyles} from '@material-ui/core'

type $1Props = {

}

const $1Style = makeStyles(() => ({
}))

const ${1:Foo} = (props: $1Props) => {
	const styles = $1Style()

	return (
		${2:<>$0</>}
	)
}

export default $1
endsnippet

snippet __react_new_component "New React Component" b
import { ReactElement } from "react";

type $1Props = {
	
};

export default function ${1:Name}({  }: $1Props): ReactElement {
	return (
		<>
			$0
		</>
	);
}
endsnippet


snippet __react_function "React function" b
function ${1:Foo}(): ReactElement {
	return (
		${2:<>$0</>}
	)
}
endsnippet
post_jump "expand(snip)"
snippet function_react_compenent "Alias for __react_function" b
__react_function$1
endsnippet

snippet __react_useState "Making react useState" b
const [${1:foo}, set`!p snip.rv = upper_camel(t[1])`] = useState<${2:string}>($3)
endsnippet
post_jump "expand(snip)"
snippet const_useState "Alias for __react_useState" b
__react_useState$1
endsnippet

snippet useEffect "Making react useState with useEffect" b
useEffect(() => {
	${1:${VISUAL}}
}, [$2])
endsnippet

snippet __react_graphql_usequery "Creating a useQuery statement" b
const {data, loading, error} = use${1}Query(${2:{variables: {${3:id}}}})
endsnippet

snippet __react_graphql_usemutation "Creating a useMutation statement" b
const [${1:add/edit/delete}, {loading}] = use$2Mutation()
$1({variables: {input: {${3:id}}}})
endsnippet
