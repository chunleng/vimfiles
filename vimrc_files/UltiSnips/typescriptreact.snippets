# For jumping ./typescript.snippets
extends typescript

global !p
def upper_camel(s):
	if len(s) > 1:
		return s[0].capitalize() + s[1:]
	return s.capitalize()
endglobal

snippet _react_new_material_component "New component created with material UI" b
import {makeStyles} from '@material-ui/core'

type $1Props = {

}

const $1Style = makeStyles(() => ({
}))

const ${1:Foo} = (props: $1Props) => {
	const styles = $1Style()

	return (
		${2:<>$0</>}
	)
}

export default $1
endsnippet

snippet _react_new_component "New React Component" b
import { ReactElement } from "react";

type $1Props = {
	
};

export default function ${1:Name}({  }: $1Props): ReactElement {
	return (
		<>
			$0
		</>
	);
}
endsnippet

snippet function_react "React function" b
type $1Props = {

}

function ${1:Foo}(props: $1Props): ReactElement {
	return (
		${2:<>$0</>}
	)
}
endsnippet

snippet _react_use_state "Making react useState" b
const [${1:foo}, set`!p snip.rv = upper_camel(t[1])`] = useState<${2:string}>($3);
endsnippet

snippet _react_use_state_with_effect "Making react useState with useEffect" b
const [${1:foo}, set`!p snip.rv = upper_camel(t[1])`] = useState<${2:string}>()

useEffect(() => {
	${3:${VISUAL:console.log("test")}}
}, [$1])
endsnippet

snippet _react_graphql_usequery "Creating a useQuery statement" b
const {data, loading, error} = use${1}Query(${2:{variables: {${3:id}}}})
endsnippet

snippet _react_graphql_usemutation "Creating a useMutation statement" b
const [${1:add/edit/delete}, {loading}] = use$2Mutation()
$1({variables: {input: {${3:id}}}})
endsnippet
